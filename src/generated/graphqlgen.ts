// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, CarSpace, Booking } from "../types";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUser {
    id: number;
  }

  export type UserResolver = (
    parent: undefined,
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | null | Promise<User[] | null>;

  export interface Type {
    user: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | null | Promise<User[] | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    userName: (parent: User) => parent.userName,
    email: (parent: User) => parent.email,
    password: (parent: User) => parent.password
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PasswordResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CarSpacesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarSpace[] | null | Promise<CarSpace[] | null>;

  export type BookingsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | null | Promise<Booking[] | null>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    userName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    password: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    carSpaces: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarSpace[] | null | Promise<CarSpace[] | null>;

    bookings: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Booking[] | null | Promise<Booking[] | null>;
  }
}

export namespace CarSpaceResolvers {
  export const defaultResolvers = {
    id: (parent: CarSpace) => parent.id,
    longitude: (parent: CarSpace) => parent.longitude,
    latitude: (parent: CarSpace) => parent.latitude,
    address: (parent: CarSpace) => parent.address
  };

  export type IdResolver = (
    parent: CarSpace,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type LongitudeResolver = (
    parent: CarSpace,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LatitudeResolver = (
    parent: CarSpace,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AddressResolver = (
    parent: CarSpace,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type OwnerResolver = (
    parent: CarSpace,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type BookingsResolver = (
    parent: CarSpace,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking[] | null | Promise<Booking[] | null>;

  export interface Type {
    id: (
      parent: CarSpace,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    longitude: (
      parent: CarSpace,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    latitude: (
      parent: CarSpace,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    address: (
      parent: CarSpace,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    owner: (
      parent: CarSpace,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    bookings: (
      parent: CarSpace,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Booking[] | null | Promise<Booking[] | null>;
  }
}

export namespace BookingResolvers {
  export const defaultResolvers = {
    id: (parent: Booking) => parent.id,
    start: (parent: Booking) => parent.start,
    end: (parent: Booking) => parent.end
  };

  export type IdResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type CarSpaceResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarSpace | Promise<CarSpace>;

  export type UserResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type StartResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EndResolver = (
    parent: Booking,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    carSpace: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarSpace | Promise<CarSpace>;

    user: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    start: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    end: (
      parent: Booking,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsPopulateDB {
    bookingCount: number | null;
  }

  export interface ArgsRegister {
    name: string;
    userName: string;
    email: string;
    password: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsAddCarSpace {
    ownerId: number;
    longitude: string;
    latitude: string;
    address: string;
  }

  export interface ArgsAddBooking {
    userId: number;
    carSpaceId: number;
    start: string;
    end: string;
  }

  export type PopulateDBResolver = (
    parent: undefined,
    args: ArgsPopulateDB,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type RegisterResolver = (
    parent: undefined,
    args: ArgsRegister,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type AddCarSpaceResolver = (
    parent: undefined,
    args: ArgsAddCarSpace,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarSpace | null | Promise<CarSpace | null>;

  export type AddBookingResolver = (
    parent: undefined,
    args: ArgsAddBooking,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Booking | null | Promise<Booking | null>;

  export interface Type {
    populateDB: (
      parent: undefined,
      args: ArgsPopulateDB,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    register: (
      parent: undefined,
      args: ArgsRegister,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    addCarSpace: (
      parent: undefined,
      args: ArgsAddCarSpace,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarSpace | null | Promise<CarSpace | null>;

    addBooking: (
      parent: undefined,
      args: ArgsAddBooking,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Booking | null | Promise<Booking | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  CarSpace: CarSpaceResolvers.Type;
  Booking: BookingResolvers.Type;
  Mutation: MutationResolvers.Type;
}
